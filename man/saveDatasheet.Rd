% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/saveDatasheet.R
\docType{methods}
\name{saveDatasheet}
\alias{saveDatasheet}
\alias{saveDatasheet,SsimObject-method}
\title{Save datasheet(s)}
\usage{
saveDatasheet(ssimObject, data, name = NULL, append = NULL,
  fileData = NULL, forceElements = F, force = F)

\S4method{saveDatasheet}{SsimObject}(ssimObject, data, name = NULL,
  append = NULL, fileData = NULL, forceElements = F, force = F)
}
\arguments{
\item{ssimObject}{SsimLibrary/Project/Scenario.}

\item{data}{A dataframe, vector, or list of these. One or more datasheets to load.}

\item{name}{character or vector of these. The name(s) of the datasheet(s) to be saved. If a vector of names is provided, then a list must be provided for the data argument. Names provided here will override those provided with data argument's list.}

\item{append}{logical. If TRUE, data will be appended to the datasheet, otherwise current values will be overwritten by data. Default TRUE for project/library-scope datasheets, and FALSE for scenario-scope datasheets.}

\item{fileData}{Named list or raster stack. Names are file names (without paths), corresponding to entries in data. The elements are objects containing the data associated with each name. Currently only supports Raster objects as elements.}

\item{forceElements}{logical. If FALSE (default) a single return message will be returns as a character string. Otherwise it will be returned in a list.}

\item{force}{logical. If datasheet scope is project/library, and append=F, datasheet will be deleted before loading the new data. This can also delete other definitions and results, so user will be prompted for approval unless force=T.}
}
\value{
A success or failure message, or a list of these.
}
\description{
Saves datasheets to a SsimLibrary/Project/Scenario.
}
\details{
Cautionary note re append=F: Deleting project and library level datasheets that contain lookups will also delete other definitions and results that rely on these lookups. 

ssimObject/project/scenario should identify a single ssimObject.

If fileData !=NULL, each element of names(fileData) should correspond uniquely to at most one entry in data. If a name is not found in data the element will be ignored with a warning.  
rsyncrosim will write each element of fileData directly to the appropriate SyncroSim input/output folders.
If fileData != NULL, data should be a dataframe, vector, or list of length 1, not a list of length >1.
}
\section{Methods (by class)}{
\itemize{
\item \code{SsimObject}: saveDatasheet of an SsimObject.
}}

