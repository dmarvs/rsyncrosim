% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/generics.R, R/ssimLibrary.R, R/project.R, R/scenario.R
\docType{methods}
\name{ssimLibrary}
\alias{ssimLibrary}
\alias{ssimLibrary,Project-method}
\alias{ssimLibrary,Scenario-method}
\title{Create or open a library.}
\usage{
ssimLibrary(name = NULL, ...)

\S4method{ssimLibrary}{missingOrNULLOrChar}(name = NULL, model = NULL,
  session = NULL, addons = NULL, backup = F, backupName = "backup",
  backupOverwrite = T, forceUpdate = F)

\S4method{ssimLibrary}{Project}(name)

\S4method{ssimLibrary}{Scenario}(name)
}
\arguments{
\item{name}{A file name, model type, SyncroSim Project or Scenario. Optional.}

\item{model}{The model type. Optional when loading an existing library.}

\item{session}{A SyncroSim \code{Session}. If NULL, the default SyncroSim Session will be used.}

\item{addons}{One or more addons. See addons() for options.}

\item{backup}{If TRUE, a backup copy is made when an existing library is opened.}

\item{backupName}{Added to a library filepath to create a backup library.}

\item{backupOverwrite}{If TRUE, the existing backup of a library (if any) will be overwritten.}

\item{forceUpdate}{If FALSE (default) user will be prompted to approve any required updates. If TRUE, required updates will be applied silently.}
}
\value{
An \code{SsimLibrary} object representing a SyncroSim library.
}
\description{
Creates or opens an \code{\link{SsimLibrary}} object representing a SyncroSim library.
}
\details{
\itemize{
  \item {If name is SyncroSim Project or Scenario: }{Returns the \code{\link{SsimLibrary}} associated with the Project or Scenario.}
  \item {If given no name and no model: }{Opens an existing SyncroSim library in
  the current working directory - returns an error if more than one library exists. If library does not exist and only one model is installed - creates a library of that type.}
  \item {If given a model but no name: }{Opens or creates a library called <model>.ssim in the current working directory.}
  \item {If given a name but no model and name is a valid model type: }{Attempts to open a library of that name. If library does not exist creates a library of type <name> in the current working directory.}
  \item {If given a name but no model and name is not a valid model type: }{Attempts to open a library of that name. Returns an error if that library does not already exist.}
  \item {If given a name and a model: }{Opens or creates a library called <name>.ssim. Returns an error if the library already exists but is a different type of model.}
}
}
\section{Methods (by class)}{
\itemize{
\item \code{Project}: Get the SsimLibrary associated with a SyncroSim Project.

\item \code{Scenario}: Get the SsimLibrary associated with a SyncroSim Scenario.
}}
\examples{
# See the installed models
models(session())

# Create a library called <model>.ssim in the current working directory.
myLibrary = ssimLibrary(model="stsim")
session(myLibrary) #The SycroSim session
filepath(myLibrary) #Path to the file on disk.
info(myLibrary) #Model type and other library information.

# Open an existing SyncroSim library in the current working directory - don't make a backup copy.
myLibrary = ssimLibrary()

# Create a library with a name in the current working directory
mySecondLibrary = ssimLibrary(name="Lib2",model="stsim")

# Create a library with a name in another directory
myThirdLibrary = ssimLibrary(name=paste0(getwd(),"/Temp/Lib3"),model="stsim")

# Create or load a library using a specific session
mySession = session("C:/Program Files/SyncroSim/1/SyncroSim.Console.exe")
myLibrary = ssimLibrary(name="Lib2",session=mySession)

# Add a project and get the library associated with that project
myProject = project(myLibrary)
myLibrary = ssimLibrary(myProject)
}

