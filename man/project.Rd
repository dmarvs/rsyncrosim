% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/project.R
\name{project}
\alias{project}
\title{Create or open a project or projects.}
\usage{
project(ssimObject, project = NULL, sourceProject = NULL, summary = NULL,
  forceElements = F)
}
\arguments{
\item{ssimObject}{SsimLibrary/Scenario or character. An ssimObject containing a filepath to a library, or a filepath.}

\item{project}{Character, integer, or vector of these. Names or ids of one or more projects.}

\item{sourceProject}{Character or integer. If not NULL, new projects will be copies of the sourceProject.}

\item{summary}{Logical. If TRUE then return the project(s) in a dataframe with the projectId, name, description, owner, dateModified, readOnly. Default is TRUE if project=NULL and ssimObject is not Scenario/Project, FALSE otherwise.}

\item{forceElements}{Logical. If TRUE then returns a single project as a named list; otherwise returns a single project as a Project object. Applies only when summary=FALSE.}
}
\value{
A \code{Project} object representing a SyncroSim project, or a dataframe of project names and descriptions.
}
\description{
If summary = FALSE, returns one or more \code{\link{Project}} objects representing a SyncroSim projects.
If summary = TRUE, returns project summary info.
}
\details{
For each element of project:
\itemize{
  \item {If element identifies an existing project: }{Returns the existing Project}
  \item {If element identifies more than one project: }{Error}
  \item {If element does not identify an existing project: }{Creates a new Project named element. Note that SyncroSim automatically assign an id to a new project.}
}
}
\examples{
#TODO â€“ update examples
# Create a new project
myLibrary = ssimLibrary(name="stsim")
myProject = project(ssimLibrary=mySsimLibrary, project="My new project name")

# Get a named list of existing projects
myProjects = project(myLibrary,summary=F) # Each element in the list is named by a character version of the project ID
names(myProjects)   # vector of the project ids

# Get an existing project. Assume that name uniquely identifies a single project - give error if not
myProject = myProjects[[1]]
myProject = project(myLibrary, project="My new project name")

# Get/set the project properties - for now we can only set the name
name(myProject)
name(myProject) = "New project name" #  - committed to db immediately
ssimLibrary(myProject) # Returns a SyncroSimLibrary object for the project
}

